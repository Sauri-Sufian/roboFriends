{"version":3,"sources":["components/Scroll.js","components/Card.js","components/CardList.js","components/SearchBox.js","components/ErrorBoundary.js","containers/Createcard.js","containers/App.js","actions.js","constants.js","serviceWorker.js","reducers.js","index.js"],"names":["Scroll","props","style","overflowY","border","height","children","Card","name","email","id","className","alt","src","CardList","robots","map","user","index","key","Error","SearchBox","searchfield","SearchChange","type","placeholder","onChange","ErrorBoundary","state","hasError","error","info","this","setState","Component","CreateCard","username","setValue","onClick","create","filterUsers","users","forEach","element","length","substring","indexOf","App","onRequestRobots","searchField","onSearch","isPending","filturedRobots","filter","toLocaleLowerCase","includes","connect","SearchRobots","requestRobots","dispatch","event","payload","target","value","fetch","then","response","json","data","catch","Boolean","window","location","hostname","match","initialState","initialStateRobots","inPending","logger","createLogger","rootReducer","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleWare","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console","message"],"mappings":"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","file":"static/js/main.a769b3d5.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Scroll=(props)=>{\r\n   /*  console.log(props.childern */\r\n    return(\r\n        <div style={{overflowY:'scroll', border:'1px ', height: \"30em\"}}>\r\n         {props.children}\r\n         </div>\r\n    )\r\n    \r\n}\r\n\r\nexport default Scroll;","import React from 'react';\r\n import './card.css';\r\n\r\n\r\nconst Card=({name , email,id})=>{\r\n    return (\r\n        <div className=\"cardBody grow\">\r\n            <img alt='profile' src={`https://robohash.org/${id}?200x200`}/>\r\n            <div>\r\n                <h2>{name}</h2>\r\n                <p>{email}</p>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Card;","import React from \"react\"\r\nimport Card from './Card'\r\n\r\n\r\nconst CardList=({robots})=>{\r\n  try{ \r\n    return (\r\n        <div>\r\n        { \r\n            robots.map((user ,index)=>\r\n            {\r\n            return( \r\n                <Card key={index} \r\n                id={robots[index].id}\r\n                name={robots[index].name}\r\n                email={robots[index].email}\r\n                 />\r\n            )\r\n            })\r\n        }      \r\n        </div>\r\n    )\r\n  }\r\n  catch{\r\n      throw new Error('Nooo')\r\n  }\r\n}\r\n\r\nexport default CardList;","import React from 'react'\r\n\r\nconst SearchBox=({searchfield,SearchChange} )=>{\r\n    return (\r\n        <div className=\"pa2\">\r\n            <input \r\n            className=\"pa3 ba b--green bg-lightest-blue\"\r\n            type=\"searchboox\"\r\n            placeholder=\"Robo search\"\r\n            onChange={SearchChange}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SearchBox;","import React, {Component} from 'react'\r\n\r\n\r\nclass ErrorBoundary extends Component{\r\n   constructor(props){\r\n       super(props);\r\n       this.state={\r\n            hasError:false\r\n       }\r\n   }\r\n\r\n   componentDidCatch(error,info){\r\n       this.setState({hasError:true})\r\n   }\r\n\r\n   render(){\r\n       if(this.state.hasError){\r\n           return <h1>OppSee WoOpSe </h1>\r\n       }\r\n       return this.props.children;\r\n   }\r\n}\r\n\r\n\r\nexport default ErrorBoundary;","import React,{Component} from 'react'\r\nimport './createcard.css'\r\n\r\n\r\nclass CreateCard extends Component{\r\n    constructor(){\r\n        super()\r\n        this.state={\r\n            name :\"\",\r\n            email:\"\",\r\n            username:\"\",\r\n            id:\"\"\r\n        }\r\n    }\r\n\r\n    render(){ \r\n        return (\r\n            <div className=\"cardBody\">\r\n            <img alt='profile' src={`https://robohash.org/22?200x200`}/>\r\n            <div>\r\n                <input  onChange={this.setValue} type=\"text\" placeholder=\"Name\"/>\r\n                <hr/>\r\n                <input onChange={this.setValue} type=\"email\" placeholder=\"email\"/>\r\n                <button onClick={this.create} >Add card</button>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\n};\r\n\r\n\r\nexport default CreateCard\r\n\r\n/*  key={index} \r\n                id={robots[index].id}\r\n                name={robots[index].name}\r\n                email={robots[index].email} */","import React, { Component } from 'react';\r\nimport { connect } from  'react-redux'\r\nimport './app.css'\r\nimport Scroll from '../components/Scroll' \r\nimport CardList from '../components/CardList'\r\nimport SearchBox from '../components/SearchBox'\r\nimport ErrorBoundary from '../components/ErrorBoundary'\r\nimport CreateCard from './Createcard'\r\nimport { setSearchField, requestRobots } from '../actions'\r\n\r\n\r\nconst mapStateToProps = state =>{\r\n    return {\r\n        searchField:state.SearchRobots.searchField,\r\n        robots:filterUsers(state.requestRobots.robots),\r\n        isPending:state.requestRobots.isPending,\r\n        error:state.requestRobots.error\r\n    }\r\n}\r\nconst mapDispatchToProps =(dispatch)=>{\r\n    return{\r\n        onSearch:(event)=> dispatch(setSearchField(event.target.value)),\r\n        onRequestRobots:()=>dispatch(requestRobots())\r\n    }\r\n}\r\n\r\n\r\nconst filterUsers=(users)=>{ \r\n    users.forEach(element => {\r\n       \r\n         if(element.name.length>20){\r\n            element.name=element.name.substring(0,element.name.indexOf(' '))\r\n        }\r\n        \r\n    });\r\n    \r\n    return users\r\n}\r\n\r\nclass App extends Component{\r\n    \r\n    componentDidMount(){\r\n         \r\n        this.props.onRequestRobots();\r\n    } \r\n\r\n    render(){ \r\n        const {searchField,onSearch,robots,isPending} =this.props\r\n       \r\n        const filturedRobots=robots.filter(robots=>{ \r\n            return robots.name.toLocaleLowerCase().includes(searchField.toLocaleLowerCase())\r\n        }\r\n            )\r\n    if(isPending){\r\n        return(\r\n            <h1 className=\"loading\">Loading</h1>\r\n        )\r\n    }\r\n    else{      \r\n        return(\r\n            <div className=\"tc pa2 app\">\r\n                <h1>Demo Media</h1>\r\n                <SearchBox SearchChange={onSearch}/>\r\n                <Scroll>\r\n                    <ErrorBoundary>\r\n                        <CardList robots={filturedRobots}/>\r\n                    </ErrorBoundary>\r\n                </Scroll>\r\n              <CreateCard/>\r\n            </div>\r\n        )\r\n        }\r\n    }\r\n}\r\n\r\n\r\nexport default connect(mapStateToProps,mapDispatchToProps) (App);","import {\r\n    CHANGE_SEARCH_FIELD,\r\n    REQUESTS_ROBOTS_PENDING,\r\n    REQUESTS_ROBOTS_SUCCESS,\r\n    REQUESTS_ROBOTS_FAILED\r\n} from './constants'\r\n\r\nexport const setSearchField =(text)=>({\r\n   \r\n    type: CHANGE_SEARCH_FIELD,\r\n    payload:text\r\n})\r\n\r\nexport const requestRobots=()=> (dispatch)=>{\r\n    dispatch({ type:REQUESTS_ROBOTS_PENDING });\r\n    fetch('https://jsonplaceholder.typicode.com/users')\r\n        .then(response =>response.json())\r\n        .then(data=>dispatch({type :REQUESTS_ROBOTS_SUCCESS, payload :data}))\r\n        .catch(error=>(dispatch({type:REQUESTS_ROBOTS_FAILED,payload:error})))\r\n}","\r\nexport const CHANGE_SEARCH_FIELD='CHANGE_SEARCH_FIELD'\r\nexport const REQUESTS_ROBOTS_PENDING='REQUESTS_ROBOTS_PENDING'\r\nexport const REQUESTS_ROBOTS_SUCCESS='REQUESTS_ROBOTS_SUCCESS'\r\nexport const REQUESTS_ROBOTS_FAILED='REQUESTS_ROBOTS_FAILED'","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import {\r\n    CHANGE_SEARCH_FIELD,\r\n    REQUESTS_ROBOTS_PENDING,\r\n    REQUESTS_ROBOTS_SUCCESS,\r\n    REQUESTS_ROBOTS_FAILED\r\n} from './constants'\r\n\r\nconst initialState ={\r\n    searchField: ''\r\n}\r\n\r\nconst initialStateRobots={\r\n    inPending:false,\r\n    robots:[],\r\n    error:''\r\n}\r\n\r\n\r\nexport const SearchRobots =(state=initialState,action={})=>{\r\n    switch(action.type){\r\n        case CHANGE_SEARCH_FIELD:\r\n            return Object.assign({},state,{searchField:action.payload})\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n\r\nexport const requestRobots = (state = initialStateRobots,action={})=>{\r\n    switch(action.type){\r\n        case REQUESTS_ROBOTS_PENDING:\r\n            return Object.assign({},state, {isPending:true})\r\n        case REQUESTS_ROBOTS_SUCCESS:\r\n            return Object.assign({},state, {robots:action.payload, isPending:false})\r\n        case REQUESTS_ROBOTS_FAILED:\r\n            return Object.assign({},state, {error :action.payload,isPending:false} )\r\n        default:\r\n            return state\r\n                        \r\n    }\r\n}","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Provider } from 'react-redux'\r\nimport { createStore , applyMiddleware , combineReducers} from 'redux'\r\nimport { createLogger } from 'redux-logger'\r\nimport thunkMiddleWare from 'redux-thunk'\r\nimport './index.css';\r\nimport App from './containers/App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { SearchRobots , requestRobots } from './reducers'\r\nimport 'tachyons'\r\n\r\nconst logger = createLogger();\r\nconst  rootReducer= combineReducers({SearchRobots,requestRobots})\r\nconst store = createStore(rootReducer,applyMiddleware(thunkMiddleWare,logger))\r\n\r\nReactDOM.render(\r\n <Provider store ={store}>\r\n   <App/>\r\n </Provider>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n/* <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>, */"],"sourceRoot":""}