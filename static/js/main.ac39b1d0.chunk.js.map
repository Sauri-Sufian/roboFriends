{"version":3,"sources":["components/Scroll.js","components/Card.js","components/Cardlist.js","components/Searchbox.js","components/ErrorBoundary.js","containers/App.js","serviceWorker.js","index.js"],"names":["Scroll","props","style","overflowY","border","height","children","Card","name","email","id","className","alt","src","Cardlist","robots","map","user","index","key","Error","Searchbox","searchfield","onSearch","type","placeholder","onChange","ErrorBoundary","state","hasError","error","info","this","setState","Component","filterUsers","users","forEach","element","length","substring","indexOf","App","event","target","value","fetch","then","response","json","filturedRobots","filter","toLocaleLowerCase","includes","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"sRAYeA,G,MAVF,SAACC,GAEV,OACI,yBAAKC,MAAO,CAACC,UAAU,SAAUC,OAAO,OAAQC,OAAQ,SACtDJ,EAAMK,YCUDC,G,MAZJ,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,KAAOC,EAAY,EAAZA,MAAMC,EAAM,EAANA,GACtB,OACI,yBAAKC,UAAU,iBACX,yBAAKC,IAAI,UAAUC,IAAG,+BAA0BH,EAA1B,cACtB,6BACI,4BAAKF,GACL,2BAAIC,OCkBLK,EAxBA,SAAC,GAAY,IAAXC,EAAU,EAAVA,OACf,IACE,OACI,6BAEIA,EAAOC,KAAI,SAACC,EAAMC,GAElB,OACI,kBAAC,EAAD,CAAMC,IAAKD,EACXR,GAAIK,EAAOG,GAAOR,GAClBF,KAAMO,EAAOG,GAAOV,KACpBC,MAAOM,EAAOG,GAAOT,YAQnC,SACI,MAAM,IAAIW,MAAM,UCTPC,EAbC,SAAC,GAA0B,EAAzBC,YAA0B,IAAdC,EAAa,EAAbA,SAC1B,OACI,yBAAKZ,UAAU,OACX,2BACAA,UAAU,mCACVa,KAAK,aACLC,YAAY,cACZC,SAAUH,MCePI,E,kDApBZ,WAAY1B,GAAO,IAAD,8BACd,cAAMA,IACD2B,MAAM,CACNC,UAAS,GAHA,E,8DAOAC,EAAMC,GACpBC,KAAKC,SAAS,CAACJ,UAAS,M,+BAIxB,OAAGG,KAAKJ,MAAMC,SACH,8CAEJG,KAAK/B,MAAMK,a,GAhBG4B,aCItBC,EAAY,SAACC,GAQf,OAPAA,EAAMC,SAAQ,SAAAC,GAENA,EAAQ9B,KAAK+B,OAAO,KACpBD,EAAQ9B,KAAK8B,EAAQ9B,KAAKgC,UAAU,EAAEF,EAAQ9B,KAAKiC,QAAQ,UAI5DL,GA6DIM,E,kDAzDX,aAAc,IAAD,8BACT,gBAqBJnB,SAAS,SAACoB,GAGN,EAAKV,SAAS,CAACX,YAAYqB,EAAMC,OAAOC,SAvBxC,EAAKjB,MAAM,CAEPb,OAAQ,GACRO,YAAY,IALP,E,gEAYO,IAAD,OACfwB,MAAM,8CACLC,MAAK,SAAAC,GACJ,OAASA,EAASC,UAEnBF,MAAK,SAAAX,GACF,EAAKH,SAAS,CAAClB,OAAOoB,EAAYC,U,+BAUjC,IAAD,OAEEc,EAAelB,KAAKJ,MAAMb,OAAOoC,QAAO,SAAApC,GAC1C,OAAOA,EAAOP,KAAK4C,oBAAoBC,SAAS,EAAKzB,MAAMN,YAAY8B,wBAI/E,OAA8B,IAA3BpB,KAAKJ,MAAMb,OAAOwB,OAEb,wBAAI5B,UAAU,WAAd,WAKA,yBAAKA,UAAU,cACX,0CACA,kBAAC,EAAD,CAAWY,SAAUS,KAAKT,WAC1B,kBAAC,EAAD,KACI,kBAAC,EAAD,KACI,kBAAC,EAAD,CAAUR,OAAQmC,W,GAhDxBhB,aCNEoB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCVNC,IAASC,OACP,6BACA,kBAAC,EAAD,OAEAC,SAASC,eAAe,SDuHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBlB,MAAK,SAAAmB,GACJA,EAAaC,gBAEdC,OAAM,SAAAtC,GACLuC,QAAQvC,MAAMA,EAAMwC,c","file":"static/js/main.ac39b1d0.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Scroll=(props)=>{\r\n   /*  console.log(props.childern */\r\n    return(\r\n        <div style={{overflowY:'scroll', border:'1px ', height: \"30em\"}}>\r\n         {props.children}\r\n         </div>\r\n    )\r\n    \r\n}\r\n\r\nexport default Scroll;","import React from 'react';\r\n import './card.css';\r\n\r\n\r\nconst Card=({name , email,id})=>{\r\n    return (\r\n        <div className=\"cardBody grow\">\r\n            <img alt='profile' src={`https://robohash.org/${id}?200x200`}/>\r\n            <div>\r\n                <h2>{name}</h2>\r\n                <p>{email}</p>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Card;","import React from \"react\"\r\nimport Card from './Card'\r\n\r\n\r\nconst Cardlist=({robots})=>{\r\n  try{ \r\n    return (\r\n        <div>\r\n        { \r\n            robots.map((user ,index)=>\r\n            {\r\n            return( \r\n                <Card key={index} \r\n                id={robots[index].id}\r\n                name={robots[index].name}\r\n                email={robots[index].email}\r\n                 />\r\n            )\r\n            })\r\n        }      \r\n        </div>\r\n    )\r\n  }\r\n  catch{\r\n      throw new Error('Nooo')\r\n  }\r\n}\r\n\r\nexport default Cardlist;","import React from 'react'\r\n\r\nconst Searchbox=({searchfield,onSearch} )=>{\r\n    return (\r\n        <div className=\"pa2\">\r\n            <input \r\n            className=\"pa3 ba b--green bg-lightest-blue\"\r\n            type=\"searchboox\"\r\n            placeholder=\"Robo search\"\r\n            onChange={onSearch}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Searchbox;","import React, {Component} from 'react'\r\n\r\n\r\nclass ErrorBoundary extends Component{\r\n   constructor(props){\r\n       super(props);\r\n       this.state={\r\n            hasError:false\r\n       }\r\n   }\r\n\r\n   componentDidCatch(error,info){\r\n       this.setState({hasError:true})\r\n   }\r\n\r\n   render(){\r\n       if(this.state.hasError){\r\n           return <h1>OppSee WoOpSe </h1>\r\n       }\r\n       return this.props.children;\r\n   }\r\n}\r\n\r\n\r\nexport default ErrorBoundary;","import React, { Component } from 'react';\r\nimport './app.css'\r\nimport Scroll from '../components/Scroll' \r\nimport Cardlist from '../components/Cardlist'\r\nimport Searchbox from '../components/Searchbox'\r\nimport ErrorBoundary from '../components/ErrorBoundary'\r\n\r\nconst filterUsers=(users)=>{ \r\n    users.forEach(element => {\r\n       \r\n         if(element.name.length>20){\r\n            element.name=element.name.substring(0,element.name.indexOf(' '))\r\n           /*  console.log(element.name) */\r\n        }\r\n    });\r\n    return users\r\n}\r\n\r\nclass App extends Component{\r\n    constructor(){\r\n        super()\r\n        this.state={\r\n            /* robots :robots, demo data for testing */\r\n            robots :[],\r\n            searchfield:''\r\n        }\r\n    }\r\n\r\n    \r\n    /* for requesting data from a server  */ \r\n    \r\n    componentDidMount(){\r\n        fetch('https://jsonplaceholder.typicode.com/users')\r\n        .then(response =>{\r\n          return   response.json();\r\n        })\r\n        .then(users=>{\r\n            this.setState({robots:filterUsers(users)})\r\n        })\r\n    } \r\n\r\n    onSearch=(event)=>{\r\n        /* console.log(event.target.value) */\r\n        /* console.log(\"Inside search\") */\r\n        this.setState({searchfield:event.target.value})\r\n\r\n    }\r\n    render(){ \r\n       \r\n        const filturedRobots=this.state.robots.filter(robots=>{ \r\n            return robots.name.toLocaleLowerCase().includes(this.state.searchfield.toLocaleLowerCase())\r\n        }\r\n            )\r\n            /*  */\r\n    if(this.state.robots.length===0){\r\n        return(\r\n            <h1 className=\"loading\">Loading</h1>\r\n        )\r\n    }\r\n    else{         \r\n        return(\r\n            <div className=\"tc pa2 app\">\r\n                <h1>Demo Media</h1>\r\n                <Searchbox onSearch={this.onSearch}/>\r\n                <Scroll>\r\n                    <ErrorBoundary>\r\n                        <Cardlist robots={filturedRobots}/>\r\n                    </ErrorBoundary>\r\n                </Scroll>\r\n            </div>\r\n        )\r\n        }\r\n    }\r\n}\r\n\r\n\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './containers/App'\r\nimport * as serviceWorker from './serviceWorker';\r\nimport 'tachyons'\r\n\r\n\r\nReactDOM.render(\r\n  <div>\r\n  <App/>\r\n  </div>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n/* <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>, */"],"sourceRoot":""}